//Script GUID:820089df-3382-46da-bacf-12f9b0fe7a61
//Used for tracking history

#DECLARE MinNumOfPairMentions int = @@int_min_num_of_Pair_mentions@@;
#DECLARE VocabularyOption int = @@int_vocabulary_option@@;

PairMentions =
    SSTREAM @@SI_Input_Path@@;

//Lemmatize
//and filter out meaningless ones like: "all", "anything", "member", "part", "kind", "type", "lot", "bit", "example", "place"
PairMentions =
    SELECT Left.ToLower() AS Left,
           LeftStart,
           LeftEnd,
           Right.ToLower() AS Right,
           RightStart,
           RightEnd,
           Tokens,
           POSTags
    FROM PairMentions
    HAVING Right != "all" AND Right != "anything" AND Right != "member" AND Right != "part" AND Right != "kind" AND Right != "type" AND Right != "lot" AND Right != "bit" AND Right.EndsWith("example") == false AND Right.EndsWith("place") == false;

//Filtering based on basic statistics
Pairs =
    SELECT Left,
           Right,
           COUNT( * ) AS Num_Of_Mentions
    FROM PairMentions
    GROUP BY Left,
             Right
    HAVING Num_Of_Mentions >= @MinNumOfPairMentions;

PairMentions =
    SELECT PairMentions.*
    FROM PairMentions
         INNER JOIN
             Pairs
         ON PairMentions.Left == Pairs.Left AND
            PairMentions.Right == Pairs.Right;

NumOfPairs =
    SELECT COUNT( * ) AS Num_Of_Pairs,
           0 AS Partition_ID
    FROM Pairs;
           
//Entity linking
#IF(@VocabularyOption == 0)
ProbaseInstances =
    EXTRACT Instance : string,
            Freq : int
    FROM "/users/v-zw/Probase/instance_dict.tsv"
    USING DefaultTextExtractor;

PairMentions =
    SELECT PairMentions.*
    FROM PairMentions
         INNER JOIN
             ProbaseInstances
         ON Left == Instance;

PairMentions =
    SELECT PairMentions.*
    FROM PairMentions
         INNER JOIN
             ProbaseInstances
         ON Right == Instance;
#ELSEIF(@VocabularyOption == 1)
    Url2Title =
        SELECT Url,
               Title.Replace('_', ' ').ToLower() AS Title
        FROM
        (
            SSTREAM "/users/v-zw/Wikipedia/url2title.ss"
        );
    
    PairMentions =
        SELECT PairMentions.*
        FROM PairMentions
             INNER JOIN
                 Url2Title
             ON Left == Title;
    
    PairMentions =
        SELECT PairMentions.*
        FROM PairMentions
             INNER JOIN
                 Url2Title
             ON Right == Title;
#ENDIF

//Count frequency of each mention (because it may be duplicate)
PairMentions =
    SELECT Left,
           Right,
           Tokens2Sentence.Process(Tokens) AS Sentence
    FROM PairMentions;

PairMentions =
    SELECT Left,
           Right,
           Sentence,
           COUNT( * ) AS Mention_Frequency
    FROM PairMentions
    GROUP BY Left,
             Right,
             Sentence;

KBPairs =
    SELECT DISTINCT Left,
                    Right
    FROM PairMentions;

NumOfKBPairs =
    SELECT COUNT( * ) AS Num_Of_KBPairs,
           0 AS Partition_ID
    FROM KBPairs;

//Filtering based on another pair set
#IF(@VocabularyOption == 0)
ProbasePairs =
    EXTRACT Hypernym : string,
            Hyponym : string,
            Freq : int
    FROM "/users/v-zw/Probase/Isa_Core_201602.tsv"
    USING DefaultTextExtractor;

ValidKBPairs =
    SELECT Left,
           Right
    FROM KBPairs
    EXCEPT ALL
    SELECT Hyponym,
           Hypernym
    FROM ProbasePairs;
#ELSEIF(@VocabularyOption == 1)
    Url2Category =
        SELECT Url,
               Category.ToLower() AS Category
        FROM
        (
            SSTREAM "/users/v-zw/Wikipedia/url2category.ss"
        );
    
    Url2Category =
        SELECT Title,
               Category
        FROM Url2Category
             INNER JOIN
                 Url2Title
             ON Url2Category.Url == Url2Title.Url;
    
    ValidKBPairs =
        SELECT Left,
               Right
        FROM KBPairs
        EXCEPT ALL
        SELECT Title,
               Category
        FROM Url2Category;
#ENDIF

NumOfValidKBPairs =
    SELECT COUNT( * ) AS Num_Of_Valid_KBPairs,
           0 AS Partition_ID
    FROM ValidKBPairs;

PairMentions =
    SELECT PairMentions.*
    FROM PairMentions
         INNER JOIN
             ValidKBPairs
         ON PairMentions.Left == ValidKBPairs.Left
            AND
            PairMentions.Right == ValidKBPairs.Right;

Stat =
    SELECT Num_Of_Pairs,
           Num_Of_KBPairs,
           Num_Of_Valid_KBPairs
    FROM NumOfPairs,
         NumOfKBPairs,
         NumOfValidKBPairs
    WHERE
    NumOfPairs.Partition_ID ==
    NumOfKBPairs.Partition_ID AND
    NumOfKBPairs.Partition_ID == NumOfValidKBPairs.Partition_ID;

OUTPUT Stat
TO SSTREAM @@SO_Stat_Path@@;

OUTPUT PairMentions
TO @@SO_Output_Path@@;